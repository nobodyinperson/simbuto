#!/usr/bin/env python3
import sys, os
import logging
import argparse
import locale
# set locale
locale.setlocale(locale.LC_ALL, '')

logger = logging.getLogger(__name__)
logger.addHandler(logging.StreamHandler())

####################
### LIBRARY PATH ###
####################
# add /usr/lib/simbuto/python to the module paths
sys.path.insert(1,"/usr/lib/simbuto/python")
import simbuto
import simbuto.config

################
### LANGUAGE ###
################
simbuto.config.install_language_globally()

#######################
### Argument Parser ###
#######################
argparser = argparse.ArgumentParser(description = _("Simbuto - a simple " 
    "graphical budgeting tool"),add_help=False)
argparser.add_argument('filename', nargs="?", help=_("the budget file to open"))
argparser.add_argument('-h','--help', action='help', help=_(
    "show help message and exit"))
argparser.add_argument('-v','--verbose', action='store_true', 
    help=_("verbose output"))
argparser.add_argument('-d','--debug', action='store_true', 
    help=_("even more verbose output"))
argparser.add_argument('--version', action='version',
    help=_("show version info and exit"),
    version = "{p} {v}".format(p=_("Simbuto"),v=simbuto.VERSION)
    )
# parse the arguments
args = argparser.parse_args()

#####################
### CONFIGURATION ###
#####################
# make sure, there is a personal configuration folder
simbuto.config.make_sure_there_is_simbuto_dotfolder()
# read the personal configuration
config = simbuto.config.get_personal_configuration()
# read system gui configuration as well
config.read(["/etc/simbuto/conf/gui.conf"])

####################
### Logger setup ###
####################
simbuto.config.setup_logger_from_config(logger = logger, 
    section="logging", config = config)

if args.debug:
    for handler in logger.handlers: 
        handler.setLevel(logging.DEBUG)
    logger.setLevel(logging.DEBUG)
    logger.propagate = True
if args.verbose:
    for handler in logger.handlers: handler.setLevel(logging.INFO)
    logger.setLevel(logging.INFO)
    logger.propagate = True

logger.info(_("This is simbuto."))
logger.debug(_("command-line: {}").format(sys.argv))
logger.debug(_("parsed arguments: {}").format(args))
logger.info(_("simbuto is still in early development phase..."))

#####################
### SignalManager ###
#####################
import simbuto.signalmanager
# a signal manager
signalmanager = simbuto.signalmanager.SignalManager()
# set the logger
signalmanager.logger = logger
# add signals
signalmanager.add_signals(["save-to-file"])

######################
### SimbutoManager ###
######################
import simbuto.manager
# a signal manager
manager = simbuto.manager.SimbutoManager()
# set the logger
manager.logger = logger
# set the signalmanager
manager.signalmanager = signalmanager
# connect signals
signalmanager.connect_to_signal(
    name="read-from-file", action = manager.read_text_from_file)
signalmanager.connect_to_signal(
    name="save-to-file", action = manager.save_text_to_file)
signalmanager.connect_to_signal(
    name="md5sum-of-file", action = manager.md5sum_of_file)
signalmanager.connect_to_signal(
    name="create-graph-from-text", action = manager.create_png_graph_from_text)

###########
### Gui ###
###########
import simbuto.gui
# a gui
gui = simbuto.gui.SimbutoGui()
# set the logger
gui.logger = logger
# set the signalmanager
gui.signalmanager = signalmanager
# set the config
gui.set_config(config)
# set up the gui
gui.setup_gui()

signalmanager.connect_to_signal(
    name="get-editor-content", action = gui.get_current_editor_content)

if args.filename:
    logger.info(_("specified file to open via command line: {}").format(
        args.filename))
    gui.fill_editor_from_file(args.filename)
else:
    logger.debug(_("no file specified to open via command line"))

# run the gui
gui.run()
